name: CI/CD with terraform
on:
  push:
    branches:
      - master

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY_SECRET: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_STATE_BUCKET_NAME }}
  AWS_SSH_KEY_PRIVATE: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  AWS_SSH_KEY_PUBLIC: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_KEY_SECRET}}
          aws-region: us-east-1    
      - name: terraform init
        run: terraform init -migrate-state -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-east-1"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var="region=us-east-1" \
          -var="public_key=${{ secrets.AWS_SSH_KEY_PUBLIC }}" \
          -var="private_key=${{ secrets.AWS_SSH_KEY_PRIVATE }}" \
          -var="key_name=deployer-key" \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_key=${{ secrets.AWS_ACCESS_KEY_SECRET }}" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform 
      - name: Set Output
        id: set-ip
        run: |-
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set IP Env variable
        run: echo SERVER_PUBLIC_IP=${{needs.deploy-infra.outputs.SERVER_PUBLIC_IP}} >> $GITHUB_ENV
      - name: login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, push docker image
        env: 
          REGISTRY: ${{steps.login-ecr.outputs.REGISTRY}}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{github.sha}}
        run: 
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: Deploy docker image to ec23
        env: 
          REGISTRY: ${{steps.login-ecr.outputs.REGISTRY}}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{github.sha}}
          AWS_DEFAULT_REGION: us-east-1
        uses: appleboy/ssh-action@master
        with:
          host: SERVER_PUBLIC_IP
          username: ubuntu
          key: ${{env.AWS_SSH_KEY_PRIVATE}}
          envs: AWS_SSH_KEY_PRIVATE,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_ACCESS_KEY_SECRET,AWS_REGION,AWS_DEFAULT_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region us-east-1);
            sudo docker stop myappcontainer|| true
            sudo docker rm myappcontainer|| true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:5000 $REGISTRY/$REPOSITORY:$IMAGE_TAG

